<statements>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>137</id><start>1039</start><end>1039</end><line>25</line><description>akka.http.scaladsl.model.HttpResponse.apply$default$2</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>146</id><start>1180</start><end>1184</end><line>29</line><description>6000</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>218</id><start>2869</start><end>2869</end><line>77</line><description>com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats)</description><symbolName>com.accounts.marshallers.Json4sMarshaller.unmarshaller</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>227</id><start>2973</start><end>2992</end><line>79</line><description>directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])</description><symbolName>akka.http.scaladsl.server.directives.OnSuccessMagnet.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionDetails.scala</source><package>com.accounts.domain</package><class>TransactionDetails</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionDetails</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionDetails.scala</path><id>92</id><start>324</start><end>358</end><line>10</line><description>org.json4s.native.Serialization.formats(org.json4s.NoTypeHints)</description><symbolName>org.json4s.Serialization.formats</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionResponse.scala</source><package>com.accounts.domain</package><class>TransactionResponse</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionResponse</fullClassName><method>toJson</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionResponse.scala</path><id>101</id><start>316</start><end>316</end><line>10</line><description>TransactionResponse.this.formats</description><symbolName>com.accounts.domain.TransactionResponse.formats</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>200</id><start>2535</start><end>2615</end><line>66</line><description>akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
  &lt;artifact&gt; val x$8: akka.http.scaladsl.model.StatusCode = x;
  &lt;artifact&gt; val x$9: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
  &lt;artifact&gt; val x$10: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  &lt;artifact&gt; val x$11: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)
})(marshalling.this.Marshaller.fromResponse))</description><symbolName>akka.http.scaladsl.server.directives.RouteDirectives.complete</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>173</id><start>2124</start><end>2134</end><line>59</line><description>akka.http.scaladsl.server.Directives.LongNumber</description><symbolName>akka.http.scaladsl.server.PathMatchers.LongNumber</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>209</id><start>2682</start><end>2780</end><line>69</line><description>akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))</description><symbolName>akka.http.scaladsl.server.directives.RouteDirectives.complete</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>182</id><start>2289</start><end>2319</end><line>63</line><description>akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any]))</description><symbolName>akka.http.scaladsl.server.directives.FutureDirectives.onSuccess</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>254</id><start>3374</start><end>3472</end><line>85</line><description>marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller))</description><symbolName>akka.http.scaladsl.marshalling.ToResponseMarshallable.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>191</id><start>2412</start><end>2462</end><line>65</line><description>akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))</description><symbolName>akka.http.scaladsl.server.directives.RouteDirectives.complete</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>HttpConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.HttpConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>83</id><start>333</start><end>369</end><line>11</line><description>conf.getString(scala.StringContext.apply(&quot;&quot;, &quot;.createuri&quot;).s(prefix))</description><symbolName>com.typesafe.config.Config.getString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>apiRoutes</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>155</id><start>1420</start><end>1455</end><line>36</line><description>AccountsRoutes.this.logAccess(AccountsRoutes.this.routes(mat))</description><symbolName>com.accounts.routes.AccountsRoutes.logAccess</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>toLogEntry</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>164</id><start>1641</start><end>1933</end><line>44</line><description>server.this.Directive.addDirectiveApply[(akka.http.scaladsl.model.HttpRequest,)](akka.http.scaladsl.server.Directives.extractRequest)(util.this.ApplyConverter.hac1[akka.http.scaladsl.model.HttpRequest]).apply(((request: akka.http.scaladsl.model.HttpRequest) =&gt; server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.logResult(directives.this.LoggingMagnet.forMessageFromFullShow[akka.http.scaladsl.server.RouteResult](toLogEntry(scala.StringContext.apply(&quot;&quot;, &quot; &quot;, &quot; ==&gt; &quot;).s(request.method.name(), request.uri), ((x0$1: Any) =&gt; x0$1 match {
  case (c @ (_: akka.http.scaladsl.server.RouteResult.Complete)) =&gt; c.response.status.toString()
  case (x @ _) =&gt; scala.StringContext.apply(&quot;unknown response part of type &quot;, &quot;&quot;).s(x.getClass())
}))))).apply(innerRoute)))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>245</id><start>3227</start><end>3297</end><line>82</line><description>marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
  &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
  &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
  &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
})(marshalling.this.Marshaller.fromResponse)</description><symbolName>akka.http.scaladsl.marshalling.ToResponseMarshallable.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\AccountsMarshaller.scala</source><package>com.accounts.marshallers</package><class>AccountsMarshaller</class><classType>Object</classType><fullClassName>com.accounts.marshallers.AccountsMarshaller</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\AccountsMarshaller.scala</path><id>110</id><start>284</start><end>339</end><line>10</line><description>org.json4s.native.Serialization.formats(org.json4s.ShortTypeHints.apply(AccountsMarshaller.this.classList))</description><symbolName>org.json4s.Serialization.formats</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>119</id><start>590</start><end>608</end><line>17</line><description>model.this.ContentTypeRange.apply(akka.http.scaladsl.model.MediaTypes.application/json)</description><symbolName>akka.http.scaladsl.model.ContentTypeRange.apply</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>128</id><start>522</start><end>1010</end><line>18</line><description>unmarshalling.this.Unmarshaller.EnhancedFromEntityUnmarshaller[akka.util.ByteString](unmarshalling.this.Unmarshaller.EnhancedFromEntityUnmarshaller[akka.util.ByteString](akka.http.scaladsl.unmarshalling.Unmarshaller.byteStringUnmarshaller).forContentTypes(model.this.ContentTypeRange.apply(akka.http.scaladsl.model.MediaTypes.application/json))).mapWithCharset[A](((data: akka.util.ByteString, charset: akka.http.scaladsl.model.HttpCharset) =&gt; try {
  val dataString: String = data.decodeString(charset.nioCharset().name());
  new com.google.gson.JsonParser().parse(dataString);
  serialization.read[A](dataString)(formats, evidence$1)
} catch {
  case (e @ (_: Throwable)) =&gt; {
    e.printStackTrace();
    throw new scala.`package`.IllegalArgumentException(akka.http.scaladsl.model.StatusCodes.BadRequest.defaultMessage)
  }
}))</description><symbolName>akka.http.scaladsl.unmarshalling.Unmarshaller.EnhancedFromEntityUnmarshaller.mapWithCharset</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>236</id><start>3101</start><end>3141</end><line>81</line><description>marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller))</description><symbolName>akka.http.scaladsl.marshalling.ToResponseMarshallable.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionRequest.scala</source><package>com.accounts.domain</package><class>TransactionRequest</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionRequest</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionRequest.scala</path><id>95</id><start>307</start><end>318</end><line>9</line><description>org.json4s.NoTypeHints</description><symbolName>org.json4s.NoTypeHints</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>23</id><start>673</start><end>684</end><line>22</line><description>Application.this.actorSystem</description><symbolName>Application.actorSystem</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\handlers\TransactionHandler.scala</source><package>com.accounts.handlers</package><class>TransactionHandler</class><classType>Object</classType><fullClassName>com.accounts.handlers.TransactionHandler</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\handlers\TransactionHandler.scala</path><id>104</id><start>465</start><end>737</end><line>15</line><description>scala.concurrent.Future.apply[com.accounts.domain.GenericHttpResponse](scala.util.Try.apply[Long](rc.db.createTransaction(transactionRequest)) match {
  case (value: Long)scala.util.Success[Long]((tx @ (_: Long))) =&gt; com.accounts.domain.GenericHttpResponse.apply(akka.http.scaladsl.model.StatusCodes.OK, com.accounts.domain.TransactionResponse.apply(tx))
  case (exception: Throwable)scala.util.Failure[Long]((ex @ _)) =&gt; com.accounts.domain.GenericHttpResponse.apply(akka.http.scaladsl.model.StatusCodes.InternalServerError, ex.getMessage())
})(ec)</description><symbolName>scala.concurrent.Future.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>131</id><start>1001</start><end>1001</end><line>24</line><description>util.this.ApplyConverter.hac1[akka.http.scaladsl.model.Uri]</description><symbolName>akka.http.scaladsl.server.util.ApplyConverterInstances.hac1</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>122</id><start>695</start><end>737</end><line>20</line><description>data.decodeString(charset.nioCharset().name())</description><symbolName>akka.util.ByteString.decodeString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>194</id><start>2578</start><end>2613</end><line>66</line><description>akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg)</description><symbolName>akka.http.scaladsl.model.HttpEntity.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>176</id><start>2181</start><end>2213</end><line>61</line><description>com.accounts.domain.GetAccountDetailsRequest.apply(custId)</description><symbolName>com.accounts.domain.GetAccountDetailsRequest.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>resolveFromCache</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>77</id><start>1544</start><end>1553</end><line>38</line><description>scala.Some.apply[akka.actor.ActorRef](ref)</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>ServiceConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.ServiceConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>86</id><start>523</start><end>584</end><line>16</line><description>ServiceConfiguration.apply(HttpConfiguration.apply(&quot;txService&quot;, conf))</description><symbolName>com.accounts.config.ServiceConfiguration.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>toLogEntry</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>158</id><start>1591</start><end>1604</end><line>43</line><description>marker.+(f.apply(r))</description><symbolName>java.lang.String.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>185</id><start>2432</start><end>2450</end><line>65</line><description>model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json)</description><symbolName>akka.http.scaladsl.model.ContentType.apply</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>167</id><start>2068</start><end>2068</end><line>56</line><description>TupleOps.this.Join.join0P[Unit]</description><symbolName>akka.http.scaladsl.server.util.TupleOps.Join.join0P</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>50</id><start>487</start><end>487</end><line>11</line><description>RouterActor.this.context</description><symbolName>akka.actor.Actor.context</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>59</id><start>608</start><end>679</end><line>14</line><description>actor.this.`package`.actorRef2Scala(RouterActor.this.sender()).!(com.accounts.domain.GenericHttpResponse.apply(akka.http.scaladsl.model.StatusCodes.BadRequest, &quot;Invalid Request&quot;))(RouterActor.this.self)</description><symbolName>akka.actor.ScalaActorRef.!</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>defaultResolver</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>68</id><start>1165</start><end>1213</end><line>28</line><description>RouterActor.this.resolveFromCache(g, (() =&gt; AccountsActor.props()(ec, rc)))(context)</description><symbolName>com.accounts.actors.RouterActor.resolveFromCache</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>32</id><start>551</start><end>551</end><line>17</line><description>AccountsActor.this.self</description><symbolName>akka.actor.Actor.self</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>41</id><start>727</start><end>727</end><line>22</line><description>AccountsActor.this.self</description><symbolName>akka.actor.Actor.self</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</source><package>com.accounts.marshallers</package><class>BaseMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.BaseMarshaller</fullClassName><method>resolveEntity</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</path><id>113</id><start>354</start><end>380</end><line>16</line><description>BaseMarshaller.this.serialization.read[T](cmd)(BaseMarshaller.this.formats, m)</description><symbolName>org.json4s.Serialization.read</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>140</id><start>1051</start><end>1051</end><line>25</line><description>marshalling.this.Marshaller.fromResponse</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromResponse</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>routes</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>149</id><start>1291</start><end>1303</end><line>31</line><description>AccountsRoutes.this.routingActor</description><symbolName>com.accounts.routes.AccountsRoutes.routingActor</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>53</id><start>456</start><end>503</end><line>11</line><description>RouterActor.this.resolver.getOrElse[Any =&gt; Option[akka.actor.ActorRef]](RouterActor.defaultResolver(RouterActor.this.ec, RouterActor.this.context, RouterActor.this.rc))</description><symbolName>scala.Option.getOrElse</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>62</id><start>567</start><end>730</end><line>15</line><description>RouterActor.this.hierarchyResolver.apply(command).fold[Unit](actor.this.`package`.actorRef2Scala(RouterActor.this.sender()).!(com.accounts.domain.GenericHttpResponse.apply(akka.http.scaladsl.model.StatusCodes.BadRequest, &quot;Invalid Request&quot;))(RouterActor.this.self))(((ref: akka.actor.ActorRef) =&gt; ref.forward(command)(RouterActor.this.context)))</description><symbolName>scala.Option.fold</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>134</id><start>1105</start><end>1117</end><line>25</line><description>t.getMessage()</description><symbolName>java.lang.Throwable.getMessage</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>35</id><start>481</start><end>564</end><line>16</line><description>com.accounts.handlers.TransactionHandler.createTransaction(cmd)(AccountsActor.this.ec, AccountsActor.this.rc).map[Unit](((d: com.accounts.domain.GenericHttpResponse) =&gt; actor.this.`package`.actorRef2Scala(senderRef).!(d)(AccountsActor.this.self)))(AccountsActor.this.ec)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</source><package>&lt;empty&gt;</package><class>AccountsServiceApp</class><classType>Object</classType><fullClassName>AccountsServiceApp</fullClassName><method>start</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</path><id>8</id><start>888</start><end>997</end><line>23</line><description>{
  &lt;artifact&gt; val qual$1: akka.http.scaladsl.HttpExt = akka.http.scaladsl.Http.apply(system);
  &lt;artifact&gt; val x$9: akka.stream.scaladsl.Flow[akka.http.scaladsl.model.HttpRequest,akka.http.scaladsl.model.HttpResponse,akka.NotUsed] = {
    &lt;artifact&gt; val x$1: akka.http.scaladsl.server.Route = com.accounts.routes.AccountsRoutes.apply(routerActor)(ec).apiRoutes(mat);
    &lt;artifact&gt; val x$2: akka.http.scaladsl.settings.RoutingSettings = settings.this.RoutingSettings.default(system);
    &lt;artifact&gt; val x$3: akka.http.scaladsl.settings.ParserSettings = settings.this.ParserSettings.default(system);
    &lt;artifact&gt; val x$4: akka.stream.ActorMaterializer = mat;
    &lt;artifact&gt; val x$5: akka.http.scaladsl.server.RoutingLog = server.this.RoutingLog.fromActorSystem(system);
    &lt;artifact&gt; val x$6: scala.concurrent.ExecutionContext = ec;
    &lt;artifact&gt; val x$7: akka.http.scaladsl.server.RejectionHandler = server.this.RouteResult.route2HandlerFlow$default$7(x$1);
    &lt;artifact&gt; val x$8: akka.http.scaladsl.server.ExceptionHandler = server.this.RouteResult.route2HandlerFlow$default$8(x$1);
    server.this.RouteResult.route2HandlerFlow(x$1)(x$2, x$3, x$4, x$5, x$6, x$7, x$8)
  };
  &lt;artifact&gt; val x$10: String = &quot;0.0.0.0&quot;;
  &lt;artifact&gt; val x$11: Int = 9002;
  &lt;artifact&gt; val x$12: akka.http.scaladsl.ConnectionContext = qual$1.bindAndHandle$default$4;
  &lt;artifact&gt; val x$13: akka.http.scaladsl.settings.ServerSettings = qual$1.bindAndHandle$default$5;
  &lt;artifact&gt; val x$14: akka.event.LoggingAdapter = qual$1.bindAndHandle$default$6;
  qual$1.bindAndHandle(x$9, x$10, x$11, x$12, x$13, x$14)(mat)
}.map[akka.Done.type](((x: akka.http.scaladsl.Http.ServerBinding) =&gt; akka.Done))(ec)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>44</id><start>639</start><end>740</end><line>21</line><description>com.accounts.handlers.TransactionHandler.getAccountAndTransactions(cmd.accountNo)(AccountsActor.this.ec, AccountsActor.this.rc).map[Unit](((d: com.accounts.domain.GenericHttpResponse) =&gt; actor.this.`package`.actorRef2Scala(senderRef).!(d)(AccountsActor.this.self)))(AccountsActor.this.ec)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>17</id><start>516</start><end>535</end><line>18</line><description>akka.stream.ActorMaterializer.apply(akka.stream.ActorMaterializer.apply$default$1, akka.stream.ActorMaterializer.apply$default$2)(Application.this.actorSystem)</description><symbolName>akka.stream.ActorMaterializer.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>26</id><start>738</start><end>757</end><line>25</line><description>e.printStackTrace()</description><symbolName>java.lang.Throwable.printStackTrace</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>125</id><start>678</start><end>825</end><line>19</line><description>{
  val dataString: String = data.decodeString(charset.nioCharset().name());
  new com.google.gson.JsonParser().parse(dataString);
  serialization.read[A](dataString)(formats, evidence$1)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>304</id><start>2021</start><end>2031</end><line>61</line><description>balance.==(0)</description><symbolName>scala.Double.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\AccountDetailsWithTransactions.scala</source><package>com.accounts.domain</package><class>AccountDetailsWithTransactions</class><classType>Class</classType><fullClassName>com.accounts.domain.AccountDetailsWithTransactions</fullClassName><method>toJson</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\AccountDetailsWithTransactions.scala</path><id>89</id><start>438</start><end>438</end><line>13</line><description>AccountDetailsWithTransactions.this.formats</description><symbolName>com.accounts.domain.AccountDetailsWithTransactions.formats</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>HttpConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.HttpConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>80</id><start>310</start><end>325</end><line>10</line><description>scala.StringContext.apply(&quot;&quot;, &quot;.port&quot;).s(prefix)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>286</id><start>1302</start><end>1324</end><line>44</line><description>acct.txList.append(tx)</description><symbolName>scala.collection.mutable.BufferLike.append</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>295</id><start>1574</start><end>1652</end><line>51</line><description>com.accounts.domain.AccountDetailsWithTransactions.apply(transactionRequest.accountId, tx.balance, txList)</description><symbolName>com.accounts.domain.AccountDetailsWithTransactions.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</source><package>com.accounts.marshallers</package><class>BaseMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.BaseMarshaller</fullClassName><method>resolveEntity</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</path><id>116</id><start>471</start><end>475</end><line>21</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>resolveFromCache</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>71</id><start>1423</start><end>1432</end><line>34</line><description>scala.Some.apply[akka.actor.ActorRef](ref)</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionRequest.scala</source><package>com.accounts.domain</package><class>TransactionRequest</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionRequest</fullClassName><method>toJson</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionRequest.scala</path><id>98</id><start>345</start><end>370</end><line>10</line><description>org.json4s.native.Serialization.write[com.accounts.domain.TransactionRequest](this)(TransactionRequest.this.formats)</description><symbolName>org.json4s.native.Serialization.write</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\AccountsMarshaller.scala</source><package>com.accounts.marshallers</package><class>AccountsMarshaller</class><classType>Object</classType><fullClassName>com.accounts.marshallers.AccountsMarshaller</fullClassName><method>classList</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\AccountsMarshaller.scala</path><id>107</id><start>250</start><end>256</end><line>8</line><description>scala.collection.immutable.Nil.::[Class[com.accounts.domain.TransactionResponse]](x$1)</description><symbolName>scala.collection.immutable.List.::</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>313</id><start>2325</start><end>2349</end><line>70</line><description>transactionRequest.value</description><symbolName>com.accounts.domain.TransactionRequest.value</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>11</id><start>391</start><end>423</end><line>16</line><description>java.util.concurrent.Executors.newFixedThreadPool(10)</description><symbolName>java.util.concurrent.Executors.newFixedThreadPool</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>307</id><start>2045</start><end>2079</end><line>62</line><description>balance.-(transactionRequest.value)</description><symbolName>scala.Double.-</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>resolveFromCache</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>74</id><start>1520</start><end>1534</end><line>37</line><description>scala.Predef.ArrowAssoc[com.accounts.domain.MessageType](command).-&gt;[akka.actor.ActorRef](ref)</description><symbolName>scala.Predef.ArrowAssoc.-&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>56</id><start>661</start><end>678</end><line>14</line><description>&quot;Invalid Request&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>262</id><start>3553</start><end>3553</end><line>90</line><description>marshalling.this.Marshaller.fromStatusCode</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromStatusCode</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>298</id><start>1712</start><end>1728</end><line>53</line><description>tx.transactionId</description><symbolName>com.accounts.domain.TransactionDetails.transactionId</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>29</id><start>467</start><end>473</end><line>15</line><description>AccountsActor.this.sender()</description><symbolName>akka.actor.Actor.sender</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>38</id><start>684</start><end>697</end><line>21</line><description>cmd.accountNo</description><symbolName>com.accounts.domain.GetAccountDetailsRequest.accountNo</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Object</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>props</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>47</id><start>850</start><end>869</end><line>29</line><description>new AccountsActor()(ec, rc)</description><symbolName>com.accounts.actors.AccountsActor.&lt;init&gt;</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>244</id><start>3239</start><end>3239</end><line>82</line><description>marshalling.this.Marshaller.fromResponse</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromResponse</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>253</id><start>3382</start><end>3382</end><line>85</line><description>marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromStatusCodeAndValue</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>226</id><start>2973</start><end>2973</end><line>79</line><description>util.this.Tupler.forAnyRef[Any]</description><symbolName>akka.http.scaladsl.server.util.LowerPriorityTupler.forAnyRef</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>20</id><start>567</start><end>567</end><line>19</line><description>Application.this.mat</description><symbolName>Application.mat</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</source><package>&lt;empty&gt;</package><class>AccountsServiceApp</class><classType>Object</classType><fullClassName>AccountsServiceApp</fullClassName><method>start</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</path><id>2</id><start>647</start><end>680</end><line>18</line><description>com.typesafe.config.ConfigFactory.load(&quot;application&quot;)</description><symbolName>com.typesafe.config.ConfigFactory.load</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>235</id><start>3111</start><end>3111</end><line>81</line><description>marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)</description><symbolName>akka.http.scaladsl.marshalling.LowPriorityToResponseMarshallerImplicits.liftMarshaller</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>316</id><start>2300</start><end>2405</end><line>70</line><description>com.accounts.domain.TransactionDetails.apply(txId, transactionRequest.value, transactionRequest.`type`, balanceUpdated, new java.util.Date())</description><symbolName>com.accounts.domain.TransactionDetails.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>289</id><start>1367</start><end>1383</end><line>46</line><description>tx.transactionId</description><symbolName>com.accounts.domain.TransactionDetails.transactionId</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>props</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>65</id><start>895</start><end>912</end><line>24</line><description>new RouterActor(actors.this.RouterActor.&lt;init&gt;$default$1)(ec, rc)</description><symbolName>com.accounts.actors.RouterActor.&lt;init&gt;</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getTransactionId</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>271</id><start>487</start><end>506</end><line>20</line><description>TransactionInfoDatabase.this.transactionCnt.+(1L)</description><symbolName>scala.Long.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getBalance</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>280</id><start>994</start><end>1013</end><line>36</line><description>scala.Some.apply[Double](accnt.balance)</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</source><package>&lt;empty&gt;</package><class>AccountsServiceApp</class><classType>Object</classType><fullClassName>AccountsServiceApp</fullClassName><method>start</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</path><id>5</id><start>848</start><end>865</end><line>21</line><description>com.accounts.actors.RouterActor.props()(ec, rc)</description><symbolName>com.accounts.actors.RouterActor.props</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>184</id><start>2432</start><end>2450</end><line>65</line><description>akka.http.scaladsl.model.MediaTypes.application/json</description><symbolName>akka.http.scaladsl.model.MediaTypes.application/json</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>193</id><start>2589</start><end>2607</end><line>66</line><description>model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json)</description><symbolName>akka.http.scaladsl.model.ContentType.apply</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>265</id><start>2106</start><end>3570</end><line>89</line><description>akka.http.scaladsl.server.Directives._enhanceRouteWithConcatenation(akka.http.scaladsl.server.Directives._enhanceRouteWithConcatenation(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.get).apply(server.this.Directive.addDirectiveApply[(Long,)](akka.http.scaladsl.server.Directives.path[(Long,)](akka.http.scaladsl.server.Directives.LongNumber))(util.this.ApplyConverter.hac1[Long]).apply(((custId: Long) =&gt; {
  val getAccountsMessage: com.accounts.domain.GetAccountDetailsRequest = com.accounts.domain.GetAccountDetailsRequest.apply(custId);
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$1: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$5: com.accounts.domain.GetAccountDetailsRequest = getAccountsMessage;
    &lt;artifact&gt; val x$6: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$7: akka.actor.ActorRef = qual$1.?$default$3(x$5);
    qual$1.?(x$5)(x$6, x$7)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$2: Any) =&gt; x0$2 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$8: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$9: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$10: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$11: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
})))).~(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.post).apply(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.accounts.domain.TransactionRequest,)](akka.http.scaladsl.server.Directives.entity[com.accounts.domain.TransactionRequest](akka.http.scaladsl.server.Directives.as[com.accounts.domain.TransactionRequest](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats)))))(util.this.ApplyConverter.hac1[com.accounts.domain.TransactionRequest]).apply(((c: com.accounts.domain.TransactionRequest) =&gt; {
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$2: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$12: com.accounts.domain.TransactionRequest = c;
    &lt;artifact&gt; val x$13: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$14: akka.actor.ActorRef = qual$2.?$default$3(x$12);
    qual$2.?(x$12)(x$13, x$14)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$3: Any) =&gt; x0$3 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
})))))).~(akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.StatusCodes.ClientError](akka.http.scaladsl.model.StatusCodes.MethodNotAllowed)(marshalling.this.Marshaller.fromStatusCode)))</description><symbolName>akka.http.scaladsl.server.RouteConcatenation.RouteWithConcatenation.~</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>301</id><start>1932</start><end>1956</end><line>60</line><description>transactionRequest.value</description><symbolName>com.accounts.domain.TransactionRequest.value</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>175</id><start>2123</start><end>2123</end><line>59</line><description>util.this.ApplyConverter.hac1[Long]</description><symbolName>akka.http.scaladsl.server.util.ApplyConverterInstances.hac1</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>256</id><start>2963</start><end>3489</end><line>79</line><description>server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$3: Any) =&gt; x0$3 match {
  case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
  case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
    &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
    &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
    &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
  })(marshalling.this.Marshaller.fromResponse))
  case (p @ _) =&gt; {
    scala.Predef.println(p);
    akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
  }
}))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>211</id><start>2119</start><end>2804</end><line>59</line><description>server.this.Directive.addDirectiveApply[(Long,)](akka.http.scaladsl.server.Directives.path[(Long,)](akka.http.scaladsl.server.Directives.LongNumber))(util.this.ApplyConverter.hac1[Long]).apply(((custId: Long) =&gt; {
  val getAccountsMessage: com.accounts.domain.GetAccountDetailsRequest = com.accounts.domain.GetAccountDetailsRequest.apply(custId);
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$1: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$5: com.accounts.domain.GetAccountDetailsRequest = getAccountsMessage;
    &lt;artifact&gt; val x$6: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$7: akka.actor.ActorRef = qual$1.?$default$3(x$5);
    qual$1.?(x$5)(x$6, x$7)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$2: Any) =&gt; x0$2 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$8: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$9: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$10: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$11: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
}))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>283</id><start>1140</start><end>1189</end><line>41</line><description>TransactionInfoDatabase.this.transactionInfo.get(transactionRequest.accountId)</description><symbolName>scala.collection.MapLike.get</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>292</id><start>1537</start><end>1554</end><line>50</line><description>txList.append(tx)</description><symbolName>scala.collection.mutable.BufferLike.append</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>166</id><start>2070</start><end>2080</end><line>56</line><description>akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;accounts&quot;)</description><symbolName>akka.http.scaladsl.server.ImplicitPathMatcherConstruction._segmentStringToPathMatcher</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getTransactionId</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>274</id><start>584</start><end>603</end><line>23</line><description>semaphore.release()</description><symbolName>java.util.concurrent.Semaphore.release</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>247</id><start>3346</start><end>3356</end><line>84</line><description>scala.Predef.println(p)</description><symbolName>scala.Predef.println</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>14</id><start>516</start><end>516</end><line>18</line><description>akka.stream.ActorMaterializer.apply$default$1</description><symbolName>akka.stream.ActorMaterializer.apply$default$1</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>220</id><start>2867</start><end>2889</end><line>77</line><description>akka.http.scaladsl.server.Directives.as[com.accounts.domain.TransactionRequest](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats)))</description><symbolName>akka.http.scaladsl.server.directives.MarshallingDirectives.as</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>229</id><start>2972</start><end>2972</end><line>79</line><description>util.this.ApplyConverter.hac1[Any]</description><symbolName>akka.http.scaladsl.server.util.ApplyConverterInstances.hac1</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>202</id><start>2691</start><end>2722</end><line>69</line><description>akka.http.scaladsl.model.StatusCodes.InternalServerError</description><symbolName>akka.http.scaladsl.model.StatusCodes.InternalServerError</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>238</id><start>3272</start><end>3290</end><line>82</line><description>akka.http.scaladsl.model.MediaTypes.application/json</description><symbolName>akka.http.scaladsl.model.MediaTypes.application/json</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>310</id><start>2113</start><end>2174</end><line>65</line><description>throw new scala.`package`.RuntimeException(&quot;Insufficient Balance in Account&quot;)</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>checkAccountNoExist</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>277</id><start>830</start><end>865</end><line>31</line><description>TransactionInfoDatabase.this.transactionInfo.contains(accountNo)</description><symbolName>scala.collection.MapLike.contains</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>142</id><start>1030</start><end>1119</end><line>25</line><description>akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
  &lt;artifact&gt; val x$1: akka.http.scaladsl.model.StatusCodes.ServerError = akka.http.scaladsl.model.StatusCodes.InternalServerError;
  &lt;artifact&gt; val x$2: akka.http.scaladsl.model.HttpEntity.Strict = model.this.HttpEntity.apply(&quot;Error &quot;.+(t.getMessage()));
  &lt;artifact&gt; val x$3: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  &lt;artifact&gt; val x$4: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$1, x$3, x$2, x$4)
})(marshalling.this.Marshaller.fromResponse))</description><symbolName>akka.http.scaladsl.server.directives.RouteDirectives.complete</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>routes</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>151</id><start>1262</start><end>1304</end><line>31</line><description>AccountsOperationRoute.route(AccountsRoutes.this.routingActor)(AccountsRoutes.this.timeout)</description><symbolName>com.accounts.routes.AccountsOperationRoute.route</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>250</id><start>3374</start><end>3472</end><line>85</line><description>scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;)</description><symbolName>scala.Tuple2.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>223</id><start>2936</start><end>2945</end><line>78</line><description>akka.pattern.`package`.ask(rootActor)</description><symbolName>akka.pattern.AskSupport.ask</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>259</id><start>2823</start><end>3522</end><line>75</line><description>server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.post).apply(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.accounts.domain.TransactionRequest,)](akka.http.scaladsl.server.Directives.entity[com.accounts.domain.TransactionRequest](akka.http.scaladsl.server.Directives.as[com.accounts.domain.TransactionRequest](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats)))))(util.this.ApplyConverter.hac1[com.accounts.domain.TransactionRequest]).apply(((c: com.accounts.domain.TransactionRequest) =&gt; {
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$2: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$12: com.accounts.domain.TransactionRequest = c;
    &lt;artifact&gt; val x$13: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$14: akka.actor.ActorRef = qual$2.?$default$3(x$12);
    qual$2.?(x$12)(x$13, x$14)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$3: Any) =&gt; x0$3 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
}))))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>232</id><start>3132</start><end>3140</end><line>81</line><description>t.toJson</description><symbolName>com.accounts.common.JsonResponse.toJson</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>124</id><start>795</start><end>825</end><line>22</line><description>serialization.read[A](dataString)(formats, evidence$1)</description><symbolName>org.json4s.Serialization.read</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\handlers\TransactionHandler.scala</source><package>com.accounts.handlers</package><class>TransactionHandler</class><classType>Object</classType><fullClassName>com.accounts.handlers.TransactionHandler</fullClassName><method>getAccountAndTransactions</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\handlers\TransactionHandler.scala</path><id>106</id><start>907</start><end>1375</end><line>26</line><description>scala.concurrent.Future.apply[com.accounts.domain.GenericHttpResponse](rc.db.checkAccountNoExist(accountNo) match {
  case true =&gt; rc.db.getAccountDetailsWithTransactions(accountNo) match {
    case (value: com.accounts.domain.AccountDetailsWithTransactions)Some[com.accounts.domain.AccountDetailsWithTransactions]((accntInfo @ _)) =&gt; com.accounts.domain.GenericHttpResponse.apply(akka.http.scaladsl.model.StatusCodes.OK, accntInfo)
    case scala.None =&gt; com.accounts.domain.GenericHttpResponse.apply(akka.http.scaladsl.model.StatusCodes.NotFound, scala.StringContext.apply(&quot;Account Information not found for &quot;, &quot;&quot;).s(accountNo))
  }
  case false =&gt; com.accounts.domain.GenericHttpResponse.apply(akka.http.scaladsl.model.StatusCodes.NotFound, scala.StringContext.apply(&quot;Account Information not found for &quot;, &quot;&quot;).s(accountNo))
})(ec)</description><symbolName>scala.concurrent.Future.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>133</id><start>1094</start><end>1102</end><line>25</line><description>&quot;Error &quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>205</id><start>2690</start><end>2690</end><line>69</line><description>scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>214</id><start>2839</start><end>2846</end><line>76</line><description>akka.http.scaladsl.server.Directives.pathEnd</description><symbolName>akka.http.scaladsl.server.directives.PathDirectives.pathEnd</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>toLogEntry</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>160</id><start>1582</start><end>1635</end><line>43</line><description>akka.http.scaladsl.server.directives.LogEntry.apply(marker.+(f.apply(r)), akka.event.Logging.InfoLevel)</description><symbolName>akka.http.scaladsl.server.directives.LogEntry.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>169</id><start>2080</start><end>2080</end><line>56</line><description>TupleOps.this.Join.join0P[Unit]</description><symbolName>akka.http.scaladsl.server.util.TupleOps.Join.join0P</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>178</id><start>2258</start><end>2258</end><line>62</line><description>qual$1.?$default$3(x$5)</description><symbolName>akka.pattern.AskableActorRef.?$default$3</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</source><package>com.accounts.marshallers</package><class>BaseMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.BaseMarshaller</fullClassName><method>resolveEntity</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</path><id>115</id><start>434</start><end>444</end><line>19</line><description>scala.Some.apply[T](cmdT)</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>187</id><start>2421</start><end>2461</end><line>65</line><description>akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson)</description><symbolName>akka.http.scaladsl.model.HttpEntity.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>196</id><start>2544</start><end>2544</end><line>66</line><description>akka.http.scaladsl.model.HttpResponse.apply$default$4</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>268</id><start>338</start><end>340</end><line>16</line><description>0L</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>241</id><start>3227</start><end>3227</end><line>82</line><description>akka.http.scaladsl.model.HttpResponse.apply$default$2</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>181</id><start>2299</start><end>2318</end><line>63</line><description>directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])</description><symbolName>akka.http.scaladsl.server.directives.OnSuccessMagnet.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>toLogEntry</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>163</id><start>1676</start><end>1926</end><line>48</line><description>server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.logResult(directives.this.LoggingMagnet.forMessageFromFullShow[akka.http.scaladsl.server.RouteResult](toLogEntry(scala.StringContext.apply(&quot;&quot;, &quot; &quot;, &quot; ==&gt; &quot;).s(request.method.name(), request.uri), ((x0$1: Any) =&gt; x0$1 match {
  case (c @ (_: akka.http.scaladsl.server.RouteResult.Complete)) =&gt; c.response.status.toString()
  case (x @ _) =&gt; scala.StringContext.apply(&quot;unknown response part of type &quot;, &quot;&quot;).s(x.getClass())
}))))).apply(innerRoute)</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>172</id><start>2106</start><end>2109</end><line>58</line><description>akka.http.scaladsl.server.Directives.get</description><symbolName>akka.http.scaladsl.server.directives.MethodDirectives.get</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>46</id><start>405</start><end>405</end><line>13</line><description>new $anonfun()</description><symbolName>com.accounts.actors.AccountsActor.$anonfun.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>118</id><start>590</start><end>608</end><line>17</line><description>akka.http.scaladsl.model.MediaTypes.application/json</description><symbolName>akka.http.scaladsl.model.MediaTypes.application/json</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>127</id><start>923</start><end>996</end><line>26</line><description>throw new scala.`package`.IllegalArgumentException(akka.http.scaladsl.model.StatusCodes.BadRequest.defaultMessage)</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>199</id><start>2544</start><end>2614</end><line>66</line><description>marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
  &lt;artifact&gt; val x$8: akka.http.scaladsl.model.StatusCode = x;
  &lt;artifact&gt; val x$9: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
  &lt;artifact&gt; val x$10: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  &lt;artifact&gt; val x$11: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)
})(marshalling.this.Marshaller.fromResponse)</description><symbolName>akka.http.scaladsl.marshalling.ToResponseMarshallable.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>136</id><start>1094</start><end>1117</end><line>25</line><description>model.this.HttpEntity.apply(&quot;Error &quot;.+(t.getMessage()))</description><symbolName>akka.http.scaladsl.model.HttpEntity.apply</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>208</id><start>2682</start><end>2780</end><line>69</line><description>marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller))</description><symbolName>akka.http.scaladsl.marshalling.ToResponseMarshallable.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>217</id><start>2869</start><end>2869</end><line>77</line><description>com.accounts.marshallers.AccountsMarshaller.formats</description><symbolName>com.accounts.marshallers.AccountsMarshaller.formats</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionResponse.scala</source><package>com.accounts.domain</package><class>TransactionResponse</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionResponse</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionResponse.scala</path><id>100</id><start>237</start><end>271</end><line>9</line><description>org.json4s.native.Serialization.formats(org.json4s.NoTypeHints)</description><symbolName>org.json4s.Serialization.formats</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>HttpConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.HttpConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>82</id><start>348</start><end>368</end><line>11</line><description>scala.StringContext.apply(&quot;&quot;, &quot;.createuri&quot;).s(prefix)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\AccountsMarshaller.scala</source><package>com.accounts.marshallers</package><class>AccountsMarshaller</class><classType>Object</classType><fullClassName>com.accounts.marshallers.AccountsMarshaller</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\AccountsMarshaller.scala</path><id>109</id><start>313</start><end>338</end><line>10</line><description>org.json4s.ShortTypeHints.apply(AccountsMarshaller.this.classList)</description><symbolName>org.json4s.ShortTypeHints.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionDetails.scala</source><package>com.accounts.domain</package><class>TransactionDetails</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionDetails</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionDetails.scala</path><id>91</id><start>346</start><end>357</end><line>10</line><description>org.json4s.NoTypeHints</description><symbolName>org.json4s.NoTypeHints</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>190</id><start>2421</start><end>2461</end><line>65</line><description>marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller))</description><symbolName>akka.http.scaladsl.marshalling.ToResponseMarshallable.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>64</id><start>793</start><end>821</end><line>23</line><description>scala.Predef.Map.apply[com.accounts.domain.MessageType, akka.actor.ActorRef]()</description><symbolName>scala.collection.generic.GenMapFactory.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>55</id><start>637</start><end>659</end><line>14</line><description>akka.http.scaladsl.model.StatusCodes.BadRequest</description><symbolName>akka.http.scaladsl.model.StatusCodes.BadRequest</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>resolveFromCache</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>73</id><start>1472</start><end>1496</end><line>36</line><description>context.actorOf(props.apply())</description><symbolName>akka.actor.ActorRefFactory.actorOf</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>145</id><start>922</start><end>1133</end><line>21</line><description>akka.http.scaladsl.server.ExceptionHandler.apply(({
  @SerialVersionUID(value = 0) final &lt;synthetic&gt; class $anonfun extends scala.runtime.AbstractPartialFunction[Throwable,akka.http.scaladsl.server.Route] with Serializable {
    def &lt;init&gt;(): &lt;$anon: Throwable =&gt; akka.http.scaladsl.server.Route&gt; = {
      $anonfun.super.&lt;init&gt;();
      ()
    };
    final override def applyOrElse[A1 &lt;: Throwable, B1 &gt;: akka.http.scaladsl.server.Route](x1: A1, default: A1 =&gt; B1): B1 = ((x1.asInstanceOf[Throwable]: Throwable): Throwable @unchecked) match {
      case (t @ (_: Exception)) =&gt; {
        t.printStackTrace();
        server.this.Directive.addDirectiveApply[(akka.http.scaladsl.model.Uri,)](akka.http.scaladsl.server.Directives.extractUri)(util.this.ApplyConverter.hac1[akka.http.scaladsl.model.Uri]).apply(((uri: akka.http.scaladsl.model.Uri) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
          &lt;artifact&gt; val x$1: akka.http.scaladsl.model.StatusCodes.ServerError = akka.http.scaladsl.model.StatusCodes.InternalServerError;
          &lt;artifact&gt; val x$2: akka.http.scaladsl.model.HttpEntity.Strict = model.this.HttpEntity.apply(&quot;Error &quot;.+(t.getMessage()));
          &lt;artifact&gt; val x$3: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
          &lt;artifact&gt; val x$4: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
          akka.http.scaladsl.model.HttpResponse.apply(x$1, x$3, x$2, x$4)
        })(marshalling.this.Marshaller.fromResponse))))
      }
      case (defaultCase$ @ _) =&gt; default.apply(x1)
    };
    final def isDefinedAt(x1: Throwable): Boolean = ((x1.asInstanceOf[Throwable]: Throwable): Throwable @unchecked) match {
      case (t @ (_: Exception)) =&gt; true
      case (defaultCase$ @ _) =&gt; false
    }
  };
  new $anonfun()
}: PartialFunction[Throwable,akka.http.scaladsl.server.Route]))</description><symbolName>akka.http.scaladsl.server.ExceptionHandler.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>apiRoutes</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>154</id><start>1440</start><end>1446</end><line>37</line><description>AccountsRoutes.this.routes(mat)</description><symbolName>com.accounts.routes.AccountsRoutes.routes</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>ServiceConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.ServiceConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>85</id><start>544</start><end>579</end><line>16</line><description>HttpConfiguration.apply(&quot;txService&quot;, conf)</description><symbolName>com.accounts.config.HttpConfiguration.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionDetails.scala</source><package>com.accounts.domain</package><class>TransactionDetails</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionDetails</fullClassName><method>toJson</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionDetails.scala</path><id>94</id><start>384</start><end>409</end><line>11</line><description>org.json4s.native.Serialization.write[com.accounts.domain.TransactionDetails](this)(TransactionDetails.this.formats)</description><symbolName>org.json4s.native.Serialization.write</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>defaultResolver</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>67</id><start>1075</start><end>1123</end><line>27</line><description>RouterActor.this.resolveFromCache(c, (() =&gt; AccountsActor.props()(ec, rc)))(context)</description><symbolName>com.accounts.actors.RouterActor.resolveFromCache</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>58</id><start>615</start><end>615</end><line>14</line><description>RouterActor.this.self</description><symbolName>akka.actor.Actor.self</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>139</id><start>1039</start><end>1118</end><line>25</line><description>akka.http.scaladsl.model.HttpResponse.apply(x$1, x$3, x$2, x$4)</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>300</id><start>1864</start><end>1889</end><line>59</line><description>transactionRequest.`type`</description><symbolName>com.accounts.domain.TransactionRequest.type</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>40</id><start>683</start><end>683</end><line>21</line><description>AccountsActor.this.rc</description><symbolName>com.accounts.actors.AccountsActor.rc</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>49</id><start>487</start><end>487</end><line>11</line><description>RouterActor.this.ec</description><symbolName>com.accounts.actors.RouterActor.ec</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>130</id><start>1001</start><end>1011</end><line>24</line><description>akka.http.scaladsl.server.Directives.extractUri</description><symbolName>akka.http.scaladsl.server.directives.BasicDirectives.extractUri</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</source><package>&lt;empty&gt;</package><class>AccountsServiceApp</class><classType>Object</classType><fullClassName>AccountsServiceApp</fullClassName><method>start</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</path><id>4</id><start>783</start><end>809</end><line>20</line><description>new com.accounts.context.ResourceContext(db, sc)</description><symbolName>com.accounts.context.ResourceContext.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>13</id><start>459</start><end>489</end><line>17</line><description>akka.actor.ActorSystem.apply(&quot;Accounts-System&quot;)</description><symbolName>akka.actor.ActorSystem.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>121</id><start>713</start><end>736</end><line>20</line><description>charset.nioCharset().name()</description><symbolName>java.nio.charset.Charset.name</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>148</id><start>1172</start><end>1198</end><line>29</line><description>akka.util.Timeout.apply(scala.concurrent.duration.`package`.DurationInt(6000).milliseconds)</description><symbolName>akka.util.Timeout.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>toLogEntry</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>157</id><start>1600</start><end>1604</end><line>43</line><description>f.apply(r)</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>22</id><start>624</start><end>649</end><line>21</line><description>Application.this.portBindingHook_=(scala.Some.apply[akka.Done](o))</description><symbolName>Application.portBindingHook_=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>31</id><start>517</start><end>517</end><line>16</line><description>AccountsActor.this.rc</description><symbolName>com.accounts.actors.AccountsActor.rc</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>resolveFromCache</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>76</id><start>1506</start><end>1534</end><line>37</line><description>RouterActor.this.actorCache_=(RouterActor.this.actorCache.+[akka.actor.ActorRef](scala.Predef.ArrowAssoc[com.accounts.domain.MessageType](command).-&gt;[akka.actor.ActorRef](ref)))</description><symbolName>com.accounts.actors.RouterActor.actorCache_=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\handlers\TransactionHandler.scala</source><package>com.accounts.handlers</package><class>TransactionHandler</class><classType>Object</classType><fullClassName>com.accounts.handlers.TransactionHandler</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\handlers\TransactionHandler.scala</path><id>103</id><start>454</start><end>459</end><line>14</line><description>rc.sc</description><symbolName>com.accounts.context.ResourceContext.sc</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</source><package>com.accounts.marshallers</package><class>BaseMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.BaseMarshaller</fullClassName><method>resolveEntity</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</path><id>112</id><start>375</start><end>375</end><line>16</line><description>BaseMarshaller.this.formats</description><symbolName>com.accounts.marshallers.BaseMarshaller.formats</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>309</id><start>2113</start><end>2174</end><line>65</line><description>throw new scala.`package`.RuntimeException(&quot;Insufficient Balance in Account&quot;)</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>16</id><start>533</start><end>533</end><line>18</line><description>Application.this.actorSystem</description><symbolName>Application.actorSystem</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionRequest.scala</source><package>com.accounts.domain</package><class>TransactionRequest</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionRequest</fullClassName><method>toJson</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionRequest.scala</path><id>97</id><start>364</start><end>364</end><line>10</line><description>TransactionRequest.this.formats</description><symbolName>com.accounts.domain.TransactionRequest.formats</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>312</id><start>2276</start><end>2294</end><line>69</line><description>TransactionInfoDatabase.this.getTransactionId()</description><symbolName>com.accounts.storage.TransactionInfoDatabase.getTransactionId</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</source><package>&lt;empty&gt;</package><class>AccountsServiceApp</class><classType>Object</classType><fullClassName>AccountsServiceApp</fullClassName><method>start</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</path><id>7</id><start>833</start><end>882</end><line>21</line><description>system.actorOf(com.accounts.actors.RouterActor.props()(ec, rc), &quot;router-actor&quot;)</description><symbolName>akka.actor.ActorRefFactory.actorOf</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>HttpConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.HttpConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>79</id><start>256</start><end>291</end><line>9</line><description>conf.getString(scala.StringContext.apply(&quot;&quot;, &quot;.hostname&quot;).s(prefix))</description><symbolName>com.typesafe.config.Config.getString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\AccountDetailsWithTransactions.scala</source><package>com.accounts.domain</package><class>AccountDetailsWithTransactions</class><classType>Class</classType><fullClassName>com.accounts.domain.AccountDetailsWithTransactions</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\AccountDetailsWithTransactions.scala</path><id>88</id><start>359</start><end>393</end><line>12</line><description>org.json4s.native.Serialization.formats(org.json4s.NoTypeHints)</description><symbolName>org.json4s.Serialization.formats</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>294</id><start>1634</start><end>1644</end><line>51</line><description>tx.balance</description><symbolName>com.accounts.domain.TransactionDetails.balance</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>303</id><start>1993</start><end>2017</end><line>61</line><description>transactionRequest.value</description><symbolName>com.accounts.domain.TransactionRequest.value</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>resolveFromCache</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>70</id><start>1366</start><end>1389</end><line>33</line><description>RouterActor.this.actorCache.get(command)</description><symbolName>scala.collection.MapLike.get</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>52</id><start>475</start><end>502</end><line>11</line><description>RouterActor.defaultResolver(RouterActor.this.ec, RouterActor.this.context, RouterActor.this.rc)</description><symbolName>com.accounts.actors.RouterActor.defaultResolver</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>43</id><start>702</start><end>702</end><line>21</line><description>AccountsActor.this.ec</description><symbolName>com.accounts.actors.AccountsActor.ec</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getAccountDetailsWithTransactions</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>276</id><start>732</start><end>762</end><line>27</line><description>TransactionInfoDatabase.this.transactionInfo.get(accountNo)</description><symbolName>scala.collection.MapLike.get</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>249</id><start>3416</start><end>3471</end><line>85</line><description>&quot;Unknown error occurred. Please contact administrator.&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>285</id><start>1241</start><end>1292</end><line>43</line><description>TransactionInfoDatabase.this.createTransaction(transactionRequest, acct.balance)</description><symbolName>com.accounts.storage.TransactionInfoDatabase.createTransaction</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>258</id><start>2839</start><end>3513</end><line>76</line><description>server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.accounts.domain.TransactionRequest,)](akka.http.scaladsl.server.Directives.entity[com.accounts.domain.TransactionRequest](akka.http.scaladsl.server.Directives.as[com.accounts.domain.TransactionRequest](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats)))))(util.this.ApplyConverter.hac1[com.accounts.domain.TransactionRequest]).apply(((c: com.accounts.domain.TransactionRequest) =&gt; {
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$2: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$12: com.accounts.domain.TransactionRequest = c;
    &lt;artifact&gt; val x$13: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$14: akka.actor.ActorRef = qual$2.?$default$3(x$12);
    qual$2.?(x$12)(x$13, x$14)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$3: Any) =&gt; x0$3 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
})))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>267</id><start>283</start><end>304</end><line>14</line><description>scala.collection.mutable.HashMap.empty[Long, com.accounts.domain.AccountDetailsWithTransactions]</description><symbolName>scala.collection.mutable.HashMap.empty</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>25</id><start>661</start><end>685</end><line>22</line><description>Application.this.hook_=(scala.Some.apply[akka.actor.ActorSystem](Application.this.actorSystem))</description><symbolName>Application.hook_=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>34</id><start>526</start><end>526</end><line>16</line><description>AccountsActor.this.ec</description><symbolName>com.accounts.actors.AccountsActor.ec</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>240</id><start>3261</start><end>3296</end><line>82</line><description>akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg)</description><symbolName>akka.http.scaladsl.model.HttpEntity.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>61</id><start>704</start><end>723</end><line>16</line><description>ref.forward(command)(RouterActor.this.context)</description><symbolName>akka.actor.ActorRef.forward</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>10</id><start>325</start><end>329</end><line>12</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>189</id><start>2431</start><end>2431</end><line>65</line><description>marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)</description><symbolName>akka.http.scaladsl.marshalling.LowPriorityToResponseMarshallerImplicits.liftMarshaller</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>225</id><start>2936</start><end>2949</end><line>78</line><description>qual$2.?(x$12)(x$13, x$14)</description><symbolName>akka.pattern.AskableActorRef.?</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>306</id><start>2055</start><end>2079</end><line>62</line><description>transactionRequest.value</description><symbolName>com.accounts.domain.TransactionRequest.value</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>37</id><start>625</start><end>631</end><line>20</line><description>AccountsActor.this.sender()</description><symbolName>akka.actor.Actor.sender</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>180</id><start>2299</start><end>2299</end><line>63</line><description>util.this.Tupler.forAnyRef[Any]</description><symbolName>akka.http.scaladsl.server.util.LowerPriorityTupler.forAnyRef</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</source><package>&lt;empty&gt;</package><class>AccountsServiceApp</class><classType>Object</classType><fullClassName>AccountsServiceApp</fullClassName><method>start</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</path><id>1</id><start>600</start><end>629</end><line>17</line><description>new com.accounts.storage.TransactionInfoDatabase()</description><symbolName>com.accounts.storage.TransactionInfoDatabase.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>207</id><start>2690</start><end>2690</end><line>69</line><description>marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromStatusCodeAndValue</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>216</id><start>2869</start><end>2869</end><line>77</line><description>com.accounts.marshallers.AccountsMarshaller.serialization</description><symbolName>com.accounts.marshallers.BaseMarshaller.serialization</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>288</id><start>1334</start><end>1357</end><line>45</line><description>acct.balance_=(tx.balance)</description><symbolName>com.accounts.domain.AccountDetailsWithTransactions.balance_=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>297</id><start>1662</start><end>1702</end><line>52</line><description>TransactionInfoDatabase.this.transactionInfo.put(acct.accountId, acct)</description><symbolName>scala.collection.mutable.MapLike.put</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>198</id><start>2556</start><end>2556</end><line>66</line><description>marshalling.this.Marshaller.fromResponse</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToResponseMarshallers.fromResponse</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getTransactionId</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>270</id><start>425</start><end>447</end><line>19</line><description>semaphore.tryAcquire()</description><symbolName>java.util.concurrent.Semaphore.tryAcquire</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getBalance</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>279</id><start>999</start><end>1012</end><line>36</line><description>accnt.balance</description><symbolName>com.accounts.domain.AccountDetailsWithTransactions.balance</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>252</id><start>3382</start><end>3382</end><line>85</line><description>marshalling.this.Marshaller.StringMarshaller</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToEntityMarshallers.StringMarshaller</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>19</id><start>567</start><end>567</end><line>19</line><description>Application.this.ec</description><symbolName>Application.ec</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>28</id><start>543</start><end>836</end><line>19</line><description>AccountsServiceApp.start()(Application.this.actorSystem, Application.this.ec, Application.this.mat).onComplete[Unit](((x0$1: scala.util.Try[akka.Done]) =&gt; x0$1 match {
  case (value: akka.Done)scala.util.Success[akka.Done]((o @ _)) =&gt; {
    Application.this.portBindingHook_=(scala.Some.apply[akka.Done](o));
    Application.this.hook_=(scala.Some.apply[akka.actor.ActorSystem](Application.this.actorSystem))
  }
  case (exception: Throwable)scala.util.Failure[akka.Done]((e @ _)) =&gt; e.printStackTrace()
}))(Application.this.ec)</description><symbolName>scala.concurrent.Future.onComplete</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>261</id><start>3541</start><end>3569</end><line>90</line><description>akka.http.scaladsl.model.StatusCodes.MethodNotAllowed</description><symbolName>akka.http.scaladsl.model.StatusCodes.MethodNotAllowed</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>234</id><start>3111</start><end>3111</end><line>81</line><description>marshalling.this.Marshaller.MessageEntityMarshaller</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToEntityMarshallers.MessageEntityMarshaller</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>243</id><start>3227</start><end>3297</end><line>82</line><description>akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>315</id><start>2394</start><end>2404</end><line>70</line><description>new java.util.Date()</description><symbolName>java.util.Date.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>282</id><start>1160</start><end>1188</end><line>41</line><description>transactionRequest.accountId</description><symbolName>com.accounts.domain.TransactionRequest.accountId</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>147</id><start>1180</start><end>1197</end><line>29</line><description>scala.concurrent.duration.`package`.DurationInt(6000).milliseconds</description><symbolName>scala.concurrent.duration.DurationConversions.milliseconds</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>174</id><start>2119</start><end>2135</end><line>59</line><description>akka.http.scaladsl.server.Directives.path[(Long,)](akka.http.scaladsl.server.Directives.LongNumber)</description><symbolName>akka.http.scaladsl.server.directives.PathDirectives.path</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>apiRoutes</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>156</id><start>1376</start><end>1464</end><line>35</line><description>server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.handleExceptions(AccountsRoutes.this.exceptionHandler)).apply(AccountsRoutes.this.logAccess(AccountsRoutes.this.routes(mat)))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>183</id><start>2298</start><end>2298</end><line>63</line><description>util.this.ApplyConverter.hac1[Any]</description><symbolName>akka.http.scaladsl.server.util.ApplyConverterInstances.hac1</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>255</id><start>3374</start><end>3472</end><line>85</line><description>akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))</description><symbolName>akka.http.scaladsl.server.directives.RouteDirectives.complete</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>228</id><start>2963</start><end>2993</end><line>79</line><description>akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any]))</description><symbolName>akka.http.scaladsl.server.directives.FutureDirectives.onSuccess</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>264</id><start>3532</start><end>3570</end><line>90</line><description>akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.StatusCodes.ClientError](akka.http.scaladsl.model.StatusCodes.MethodNotAllowed)(marshalling.this.Marshaller.fromStatusCode))</description><symbolName>akka.http.scaladsl.server.directives.RouteDirectives.complete</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>129</id><start>974</start><end>993</end><line>23</line><description>t.printStackTrace()</description><symbolName>java.lang.Throwable.printStackTrace</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>138</id><start>1039</start><end>1039</end><line>25</line><description>akka.http.scaladsl.model.HttpResponse.apply$default$4</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>210</id><start>2289</start><end>2793</end><line>63</line><description>server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$2: Any) =&gt; x0$2 match {
  case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
  case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
    &lt;artifact&gt; val x$8: akka.http.scaladsl.model.StatusCode = x;
    &lt;artifact&gt; val x$9: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
    &lt;artifact&gt; val x$10: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
    &lt;artifact&gt; val x$11: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
    akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)
  })(marshalling.this.Marshaller.fromResponse))
  case (p @ _) =&gt; {
    scala.Predef.println(p);
    akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
  }
}))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>219</id><start>2869</start><end>2869</end><line>77</line><description>unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats))</description><symbolName>akka.http.scaladsl.unmarshalling.LowerPriorityGenericUnmarshallers.messageUnmarshallerFromEntityUnmarshaller</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>291</id><start>1487</start><end>1527</end><line>49</line><description>TransactionInfoDatabase.this.createTransaction(transactionRequest, 0.0)</description><symbolName>com.accounts.storage.TransactionInfoDatabase.createTransaction</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>120</id><start>522</start><end>609</end><line>17</line><description>unmarshalling.this.Unmarshaller.EnhancedFromEntityUnmarshaller[akka.util.ByteString](akka.http.scaladsl.unmarshalling.Unmarshaller.byteStringUnmarshaller).forContentTypes(model.this.ContentTypeRange.apply(akka.http.scaladsl.model.MediaTypes.application/json))</description><symbolName>akka.http.scaladsl.unmarshalling.Unmarshaller.EnhancedFromEntityUnmarshaller.forContentTypes</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>165</id><start>2062</start><end>2067</end><line>56</line><description>&quot;app&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>237</id><start>3092</start><end>3142</end><line>81</line><description>akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))</description><symbolName>akka.http.scaladsl.server.directives.RouteDirectives.complete</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>246</id><start>3218</start><end>3298</end><line>82</line><description>akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
  &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
  &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
  &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
})(marshalling.this.Marshaller.fromResponse))</description><symbolName>akka.http.scaladsl.server.directives.RouteDirectives.complete</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>192</id><start>2589</start><end>2607</end><line>66</line><description>akka.http.scaladsl.model.MediaTypes.application/json</description><symbolName>akka.http.scaladsl.model.MediaTypes.application/json</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>201</id><start>2657</start><end>2667</end><line>68</line><description>scala.Predef.println(p)</description><symbolName>scala.Predef.println</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getTransactionId</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>273</id><start>523</start><end>575</end><line>21</line><description>throw new scala.`package`.RuntimeException(&quot;Unable to acquire lock&quot;)</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>60</id><start>708</start><end>708</end><line>16</line><description>RouterActor.this.context</description><symbolName>akka.actor.Actor.context</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>213</id><start>2823</start><end>2827</end><line>75</line><description>akka.http.scaladsl.server.Directives.post</description><symbolName>akka.http.scaladsl.server.directives.MethodDirectives.post</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>186</id><start>2452</start><end>2460</end><line>65</line><description>t.toJson</description><symbolName>com.accounts.common.JsonResponse.toJson</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>222</id><start>2866</start><end>2866</end><line>77</line><description>util.this.ApplyConverter.hac1[com.accounts.domain.TransactionRequest]</description><symbolName>akka.http.scaladsl.server.util.ApplyConverterInstances.hac1</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\AccountDetailsWithTransactions.scala</source><package>com.accounts.domain</package><class>AccountDetailsWithTransactions</class><classType>Class</classType><fullClassName>com.accounts.domain.AccountDetailsWithTransactions</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\AccountDetailsWithTransactions.scala</path><id>87</id><start>381</start><end>392</end><line>12</line><description>org.json4s.NoTypeHints</description><symbolName>org.json4s.NoTypeHints</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionRequest.scala</source><package>com.accounts.domain</package><class>TransactionRequest</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionRequest</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionRequest.scala</path><id>96</id><start>285</start><end>319</end><line>9</line><description>org.json4s.native.Serialization.formats(org.json4s.NoTypeHints)</description><symbolName>org.json4s.Serialization.formats</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>168</id><start>2081</start><end>2095</end><line>56</line><description>akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;transactions&quot;)</description><symbolName>akka.http.scaladsl.server.ImplicitPathMatcherConstruction._segmentStringToPathMatcher</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>177</id><start>2248</start><end>2257</end><line>62</line><description>akka.pattern.`package`.ask(rootActor)</description><symbolName>akka.pattern.AskSupport.ask</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>routes</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>150</id><start>1290</start><end>1290</end><line>31</line><description>AccountsRoutes.this.timeout</description><symbolName>com.accounts.routes.AccountsRoutes.timeout</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>132</id><start>1052</start><end>1083</end><line>25</line><description>akka.http.scaladsl.model.StatusCodes.InternalServerError</description><symbolName>akka.http.scaladsl.model.StatusCodes.InternalServerError</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>toLogEntry</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>159</id><start>1606</start><end>1634</end><line>43</line><description>akka.event.Logging.InfoLevel</description><symbolName>akka.event.Logging.InfoLevel</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>141</id><start>1039</start><end>1118</end><line>25</line><description>marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
  &lt;artifact&gt; val x$1: akka.http.scaladsl.model.StatusCodes.ServerError = akka.http.scaladsl.model.StatusCodes.InternalServerError;
  &lt;artifact&gt; val x$2: akka.http.scaladsl.model.HttpEntity.Strict = model.this.HttpEntity.apply(&quot;Error &quot;.+(t.getMessage()));
  &lt;artifact&gt; val x$3: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  &lt;artifact&gt; val x$4: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$1, x$3, x$2, x$4)
})(marshalling.this.Marshaller.fromResponse)</description><symbolName>akka.http.scaladsl.marshalling.ToResponseMarshallable.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\handlers\TransactionHandler.scala</source><package>com.accounts.handlers</package><class>TransactionHandler</class><classType>Object</classType><fullClassName>com.accounts.handlers.TransactionHandler</fullClassName><method>getAccountAndTransactions</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\handlers\TransactionHandler.scala</path><id>105</id><start>896</start><end>901</end><line>25</line><description>rc.sc</description><symbolName>com.accounts.context.ResourceContext.sc</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</source><package>com.accounts.marshallers</package><class>BaseMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.BaseMarshaller</fullClassName><method>resolveEntity</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</path><id>114</id><start>341</start><end>387</end><line>15</line><description>scala.util.Try.apply[T](BaseMarshaller.this.serialization.read[T](cmd)(BaseMarshaller.this.formats, m))</description><symbolName>scala.util.Try.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>123</id><start>749</start><end>783</end><line>21</line><description>new com.google.gson.JsonParser().parse(dataString)</description><symbolName>com.google.gson.JsonParser.parse</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>195</id><start>2544</start><end>2544</end><line>66</line><description>akka.http.scaladsl.model.HttpResponse.apply$default$2</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>204</id><start>2682</start><end>2780</end><line>69</line><description>scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;)</description><symbolName>scala.Tuple2.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>HttpConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.HttpConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>78</id><start>271</start><end>290</end><line>9</line><description>scala.StringContext.apply(&quot;&quot;, &quot;.hostname&quot;).s(prefix)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>defaultResolver</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>69</id><start>1229</start><end>1233</end><line>29</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>231</id><start>3112</start><end>3130</end><line>81</line><description>model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json)</description><symbolName>akka.http.scaladsl.model.ContentType.apply</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\AccountDetailsWithTransactions.scala</source><package>com.accounts.domain</package><class>AccountDetailsWithTransactions</class><classType>Class</classType><fullClassName>com.accounts.domain.AccountDetailsWithTransactions</fullClassName><method>toJson</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\AccountDetailsWithTransactions.scala</path><id>90</id><start>419</start><end>444</end><line>13</line><description>org.json4s.native.Serialization.write[com.accounts.domain.AccountDetailsWithTransactions](this)(AccountDetailsWithTransactions.this.formats)</description><symbolName>org.json4s.native.Serialization.write</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>63</id><start>539</start><end>539</end><line>12</line><description>new $anonfun()</description><symbolName>com.accounts.actors.RouterActor.$anonfun.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionResponse.scala</source><package>com.accounts.domain</package><class>TransactionResponse</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionResponse</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionResponse.scala</path><id>99</id><start>259</start><end>270</end><line>9</line><description>org.json4s.NoTypeHints</description><symbolName>org.json4s.NoTypeHints</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>45</id><start>702</start><end>702</end><line>21</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>54</id><start>608</start><end>614</end><line>14</line><description>RouterActor.this.sender()</description><symbolName>akka.actor.Actor.sender</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>171</id><start>2051</start><end>2096</end><line>56</line><description>akka.http.scaladsl.server.Directives.pathPrefix[Unit](akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;app&quot;)./[Unit](akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;accounts&quot;))(TupleOps.this.Join.join0P[Unit])./[Unit](akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;transactions&quot;))(TupleOps.this.Join.join0P[Unit]))</description><symbolName>akka.http.scaladsl.server.directives.PathDirectives.pathPrefix</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>resolveFromCache</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>72</id><start>1488</start><end>1495</end><line>36</line><description>props.apply()</description><symbolName>scala.Function0.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>HttpConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.HttpConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>81</id><start>298</start><end>326</end><line>10</line><description>conf.getInt(scala.StringContext.apply(&quot;&quot;, &quot;.port&quot;).s(prefix))</description><symbolName>com.typesafe.config.Config.getInt</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>144</id><start>939</start><end>939</end><line>21</line><description>new $anonfun()</description><symbolName>com.accounts.routes.AccountsRoutes.$anonfun.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>126</id><start>890</start><end>909</end><line>25</line><description>e.printStackTrace()</description><symbolName>java.lang.Throwable.printStackTrace</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>apiRoutes</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>153</id><start>1376</start><end>1410</end><line>35</line><description>akka.http.scaladsl.server.Directives.handleExceptions(AccountsRoutes.this.exceptionHandler)</description><symbolName>akka.http.scaladsl.server.directives.ExecutionDirectives.handleExceptions</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>toLogEntry</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>162</id><start>1641</start><end>1641</end><line>44</line><description>util.this.ApplyConverter.hac1[akka.http.scaladsl.model.HttpRequest]</description><symbolName>akka.http.scaladsl.server.util.ApplyConverterInstances.hac1</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>27</id><start>581</start><end>581</end><line>19</line><description>Application.this.ec</description><symbolName>Application.ec</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>36</id><start>526</start><end>526</end><line>16</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\AccountsMarshaller.scala</source><package>com.accounts.marshallers</package><class>AccountsMarshaller</class><classType>Object</classType><fullClassName>com.accounts.marshallers.AccountsMarshaller</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\AccountsMarshaller.scala</path><id>108</id><start>328</start><end>337</end><line>10</line><description>AccountsMarshaller.this.classList</description><symbolName>com.accounts.marshallers.AccountsMarshaller.classList</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>135</id><start>1094</start><end>1117</end><line>25</line><description>&quot;Error &quot;.+(t.getMessage())</description><symbolName>java.lang.String.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</source><package>com.accounts.marshallers</package><class>Json4sMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.Json4sMarshaller</fullClassName><method>unmarshaller</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\Json4sMarshaller.scala</path><id>117</id><start>522</start><end>565</end><line>16</line><description>akka.http.scaladsl.unmarshalling.Unmarshaller.byteStringUnmarshaller</description><symbolName>akka.http.scaladsl.unmarshalling.PredefinedFromEntityUnmarshallers.byteStringUnmarshaller</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>18</id><start>567</start><end>567</end><line>19</line><description>Application.this.actorSystem</description><symbolName>Application.actorSystem</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>9</id><start>281</start><end>285</end><line>11</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Object</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>props</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>48</id><start>844</start><end>870</end><line>29</line><description>akka.actor.Props.apply[com.accounts.actors.AccountsActor](new AccountsActor()(ec, rc))((ClassTag.apply[com.accounts.actors.AccountsActor](classOf[com.accounts.actors.AccountsActor]): scala.reflect.ClassTag[com.accounts.actors.AccountsActor]))</description><symbolName>akka.actor.Props.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>57</id><start>617</start><end>679</end><line>14</line><description>com.accounts.domain.GenericHttpResponse.apply(akka.http.scaladsl.model.StatusCodes.BadRequest, &quot;Invalid Request&quot;)</description><symbolName>com.accounts.domain.GenericHttpResponse.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>21</id><start>642</start><end>649</end><line>21</line><description>scala.Some.apply[akka.Done](o)</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>263</id><start>3541</start><end>3569</end><line>90</line><description>marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.StatusCodes.ClientError](akka.http.scaladsl.model.StatusCodes.MethodNotAllowed)(marshalling.this.Marshaller.fromStatusCode)</description><symbolName>akka.http.scaladsl.marshalling.ToResponseMarshallable.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getTransactionId</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>272</id><start>471</start><end>506</end><line>20</line><description>TransactionInfoDatabase.this.transactionCnt_=(TransactionInfoDatabase.this.transactionCnt.+(1L))</description><symbolName>com.accounts.storage.TransactionInfoDatabase.transactionCnt_=</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</source><package>&lt;empty&gt;</package><class>AccountsServiceApp</class><classType>Object</classType><fullClassName>AccountsServiceApp</fullClassName><method>start</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</path><id>3</id><start>716</start><end>744</end><line>19</line><description>com.accounts.config.ServiceConfiguration.apply(config)</description><symbolName>com.accounts.config.ServiceConfiguration.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</source><package>com.accounts.config</package><class>HttpConfiguration</class><classType>Object</classType><fullClassName>com.accounts.config.HttpConfiguration</fullClassName><method>apply</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\config\ServiceConfiguration.scala</path><id>84</id><start>232</start><end>370</end><line>8</line><description>HttpConfiguration.apply(conf.getString(scala.StringContext.apply(&quot;&quot;, &quot;.hostname&quot;).s(prefix)), conf.getInt(scala.StringContext.apply(&quot;&quot;, &quot;.port&quot;).s(prefix)), conf.getString(scala.StringContext.apply(&quot;&quot;, &quot;.createuri&quot;).s(prefix)))</description><symbolName>com.accounts.config.HttpConfiguration.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>12</id><start>361</start><end>424</end><line>16</line><description>scala.concurrent.ExecutionContext.fromExecutor(java.util.concurrent.Executors.newFixedThreadPool(10))</description><symbolName>scala.concurrent.ExecutionContext.fromExecutor</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionDetails.scala</source><package>com.accounts.domain</package><class>TransactionDetails</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionDetails</fullClassName><method>toJson</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionDetails.scala</path><id>93</id><start>403</start><end>403</end><line>11</line><description>TransactionDetails.this.formats</description><symbolName>com.accounts.domain.TransactionDetails.formats</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionResponse.scala</source><package>com.accounts.domain</package><class>TransactionResponse</class><classType>Class</classType><fullClassName>com.accounts.domain.TransactionResponse</fullClassName><method>toJson</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\domain\TransactionResponse.scala</path><id>102</id><start>297</start><end>322</end><line>10</line><description>org.json4s.native.Serialization.write[com.accounts.domain.TransactionResponse](this)(TransactionResponse.this.formats)</description><symbolName>org.json4s.native.Serialization.write</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>299</id><start>1120</start><end>1742</end><line>40</line><description>TransactionInfoDatabase.this.synchronized[Long](TransactionInfoDatabase.this.transactionInfo.get(transactionRequest.accountId) match {
  case (value: com.accounts.domain.AccountDetailsWithTransactions)Some[com.accounts.domain.AccountDetailsWithTransactions]((acct @ _)) =&gt; {
    val tx: com.accounts.domain.TransactionDetails = TransactionInfoDatabase.this.createTransaction(transactionRequest, acct.balance);
    acct.txList.append(tx);
    acct.balance_=(tx.balance);
    tx.transactionId
  }
  case scala.None =&gt; {
    val txList: scala.collection.mutable.ListBuffer[com.accounts.domain.TransactionDetails] = scala.collection.mutable.ListBuffer.empty[com.accounts.domain.TransactionDetails];
    val tx: com.accounts.domain.TransactionDetails = TransactionInfoDatabase.this.createTransaction(transactionRequest, 0.0);
    txList.append(tx);
    val acct: com.accounts.domain.AccountDetailsWithTransactions = com.accounts.domain.AccountDetailsWithTransactions.apply(transactionRequest.accountId, tx.balance, txList);
    TransactionInfoDatabase.this.transactionInfo.put(acct.accountId, acct);
    tx.transactionId
  }
})</description><symbolName>java.lang.Object.synchronized</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>308</id><start>2045</start><end>2079</end><line>62</line><description>balance.-(transactionRequest.value)</description><symbolName>scala.Double.-</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>resolveFromCache</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>75</id><start>1506</start><end>1534</end><line>37</line><description>RouterActor.this.actorCache.+[akka.actor.ActorRef](scala.Predef.ArrowAssoc[com.accounts.domain.MessageType](command).-&gt;[akka.actor.ActorRef](ref))</description><symbolName>scala.collection.immutable.Map.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getBalance</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>281</id><start>1033</start><end>1037</end><line>37</line><description>scala.None</description><symbolName>scala.None</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>290</id><start>1423</start><end>1467</end><line>48</line><description>scala.collection.mutable.ListBuffer.empty[com.accounts.domain.TransactionDetails]</description><symbolName>scala.collection.generic.GenericCompanion.empty</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>30</id><start>517</start><end>517</end><line>16</line><description>AccountsActor.this.ec</description><symbolName>com.accounts.actors.AccountsActor.ec</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>39</id><start>683</start><end>683</end><line>21</line><description>AccountsActor.this.ec</description><symbolName>com.accounts.actors.AccountsActor.ec</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</source><package>com.accounts.marshallers</package><class>BaseMarshaller</class><classType>Trait</classType><fullClassName>com.accounts.marshallers.BaseMarshaller</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\marshallers\BaseMarshaller.scala</path><id>111</id><start>166</start><end>186</end><line>8</line><description>org.json4s.native.Serialization</description><symbolName>org.json4s.native.Serialization</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Object</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>props</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>66</id><start>889</start><end>913</end><line>24</line><description>akka.actor.Props.apply[com.accounts.actors.RouterActor](new RouterActor(actors.this.RouterActor.&lt;init&gt;$default$1)(ec, rc))((ClassTag.apply[com.accounts.actors.RouterActor](classOf[com.accounts.actors.RouterActor]): scala.reflect.ClassTag[com.accounts.actors.RouterActor]))</description><symbolName>akka.actor.Props.apply</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>15</id><start>516</start><end>516</end><line>18</line><description>akka.stream.ActorMaterializer.apply$default$2</description><symbolName>akka.stream.ActorMaterializer.apply$default$2</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>230</id><start>3112</start><end>3130</end><line>81</line><description>akka.http.scaladsl.model.MediaTypes.application/json</description><symbolName>akka.http.scaladsl.model.MediaTypes.application/json</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>42</id><start>717</start><end>730</end><line>22</line><description>actor.this.`package`.actorRef2Scala(senderRef).!(d)(AccountsActor.this.self)</description><symbolName>akka.actor.ScalaActorRef.!</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</source><package>com.accounts.actors</package><class>RouterActor</class><classType>Class</classType><fullClassName>com.accounts.actors.RouterActor</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\RouterActor.scala</path><id>51</id><start>487</start><end>487</end><line>11</line><description>RouterActor.this.rc</description><symbolName>com.accounts.actors.RouterActor.rc</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>257</id><start>2860</start><end>3502</end><line>77</line><description>server.this.Directive.addDirectiveApply[(com.accounts.domain.TransactionRequest,)](akka.http.scaladsl.server.Directives.entity[com.accounts.domain.TransactionRequest](akka.http.scaladsl.server.Directives.as[com.accounts.domain.TransactionRequest](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats)))))(util.this.ApplyConverter.hac1[com.accounts.domain.TransactionRequest]).apply(((c: com.accounts.domain.TransactionRequest) =&gt; {
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$2: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$12: com.accounts.domain.TransactionRequest = c;
    &lt;artifact&gt; val x$13: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$14: akka.actor.ActorRef = qual$2.?$default$3(x$12);
    qual$2.?(x$12)(x$13, x$14)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$3: Any) =&gt; x0$3 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
}))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</source><package>&lt;empty&gt;</package><class>Application</class><classType>Object</classType><fullClassName>Application</fullClassName><method>&lt;none&gt;</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\Application.scala</path><id>24</id><start>668</start><end>685</end><line>22</line><description>scala.Some.apply[akka.actor.ActorSystem](Application.this.actorSystem)</description><symbolName>scala.Some.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</source><package>com.accounts.actors</package><class>AccountsActor</class><classType>Class</classType><fullClassName>com.accounts.actors.AccountsActor</fullClassName><method>receive</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\actors\AccountsActor.scala</path><id>33</id><start>541</start><end>554</end><line>17</line><description>actor.this.`package`.actorRef2Scala(senderRef).!(d)(AccountsActor.this.self)</description><symbolName>akka.actor.ScalaActorRef.!</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</source><package>&lt;empty&gt;</package><class>AccountsServiceApp</class><classType>Object</classType><fullClassName>AccountsServiceApp</fullClassName><method>start</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\AccountsServiceApp.scala</path><id>6</id><start>867</start><end>881</end><line>21</line><description>&quot;router-actor&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>248</id><start>3383</start><end>3414</end><line>85</line><description>akka.http.scaladsl.model.StatusCodes.InternalServerError</description><symbolName>akka.http.scaladsl.model.StatusCodes.InternalServerError</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>221</id><start>2860</start><end>2890</end><line>77</line><description>akka.http.scaladsl.server.Directives.entity[com.accounts.domain.TransactionRequest](akka.http.scaladsl.server.Directives.as[com.accounts.domain.TransactionRequest](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats))))</description><symbolName>akka.http.scaladsl.server.directives.MarshallingDirectives.entity</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>302</id><start>1922</start><end>1956</end><line>60</line><description>balance.+(transactionRequest.value)</description><symbolName>scala.Double.+</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>203</id><start>2724</start><end>2779</end><line>69</line><description>&quot;Unknown error occurred. Please contact administrator.&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getTransactionId</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>275</id><start>609</start><end>623</end><line>24</line><description>TransactionInfoDatabase.this.transactionCnt</description><symbolName>com.accounts.storage.TransactionInfoDatabase.transactionCnt</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>212</id><start>2106</start><end>2813</end><line>58</line><description>server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.get).apply(server.this.Directive.addDirectiveApply[(Long,)](akka.http.scaladsl.server.Directives.path[(Long,)](akka.http.scaladsl.server.Directives.LongNumber))(util.this.ApplyConverter.hac1[Long]).apply(((custId: Long) =&gt; {
  val getAccountsMessage: com.accounts.domain.GetAccountDetailsRequest = com.accounts.domain.GetAccountDetailsRequest.apply(custId);
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$1: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$5: com.accounts.domain.GetAccountDetailsRequest = getAccountsMessage;
    &lt;artifact&gt; val x$6: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$7: akka.actor.ActorRef = qual$1.?$default$3(x$5);
    qual$1.?(x$5)(x$6, x$7)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$2: Any) =&gt; x0$2 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$8: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$9: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$10: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$11: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
})))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>311</id><start>2201</start><end>2252</end><line>67</line><description>throw new scala.`package`.RuntimeException(&quot;Unsupported Operation&quot;)</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>284</id><start>1279</start><end>1291</end><line>43</line><description>acct.balance</description><symbolName>com.accounts.domain.AccountDetailsWithTransactions.balance</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>293</id><start>1605</start><end>1633</end><line>51</line><description>transactionRequest.accountId</description><symbolName>com.accounts.domain.TransactionRequest.accountId</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>266</id><start>2051</start><end>3575</end><line>56</line><description>server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.pathPrefix[Unit](akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;app&quot;)./[Unit](akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;accounts&quot;))(TupleOps.this.Join.join0P[Unit])./[Unit](akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;transactions&quot;))(TupleOps.this.Join.join0P[Unit]))).apply(akka.http.scaladsl.server.Directives._enhanceRouteWithConcatenation(akka.http.scaladsl.server.Directives._enhanceRouteWithConcatenation(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.get).apply(server.this.Directive.addDirectiveApply[(Long,)](akka.http.scaladsl.server.Directives.path[(Long,)](akka.http.scaladsl.server.Directives.LongNumber))(util.this.ApplyConverter.hac1[Long]).apply(((custId: Long) =&gt; {
  val getAccountsMessage: com.accounts.domain.GetAccountDetailsRequest = com.accounts.domain.GetAccountDetailsRequest.apply(custId);
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$1: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$5: com.accounts.domain.GetAccountDetailsRequest = getAccountsMessage;
    &lt;artifact&gt; val x$6: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$7: akka.actor.ActorRef = qual$1.?$default$3(x$5);
    qual$1.?(x$5)(x$6, x$7)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$2: Any) =&gt; x0$2 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$8: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$9: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$10: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$11: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
})))).~(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.post).apply(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.accounts.domain.TransactionRequest,)](akka.http.scaladsl.server.Directives.entity[com.accounts.domain.TransactionRequest](akka.http.scaladsl.server.Directives.as[com.accounts.domain.TransactionRequest](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats)))))(util.this.ApplyConverter.hac1[com.accounts.domain.TransactionRequest]).apply(((c: com.accounts.domain.TransactionRequest) =&gt; {
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$2: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$12: com.accounts.domain.TransactionRequest = c;
    &lt;artifact&gt; val x$13: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$14: akka.actor.ActorRef = qual$2.?$default$3(x$12);
    qual$2.?(x$12)(x$13, x$14)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$3: Any) =&gt; x0$3 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
})))))).~(akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.StatusCodes.ClientError](akka.http.scaladsl.model.StatusCodes.MethodNotAllowed)(marshalling.this.Marshaller.fromStatusCode))))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>239</id><start>3272</start><end>3290</end><line>82</line><description>model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json)</description><symbolName>akka.http.scaladsl.model.ContentType.apply</symbolName><treeName>ApplyImplicitView</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>314</id><start>2351</start><end>2376</end><line>70</line><description>transactionRequest.`type`</description><symbolName>com.accounts.domain.TransactionRequest.type</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>apiRoutes</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>152</id><start>1393</start><end>1409</end><line>35</line><description>AccountsRoutes.this.exceptionHandler</description><symbolName>com.accounts.routes.AccountsRoutes.exceptionHandler</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>179</id><start>2248</start><end>2278</end><line>62</line><description>qual$1.?(x$5)(x$6, x$7)</description><symbolName>akka.pattern.AskableActorRef.?</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>188</id><start>2431</start><end>2431</end><line>65</line><description>marshalling.this.Marshaller.MessageEntityMarshaller</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToEntityMarshallers.MessageEntityMarshaller</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>260</id><start>2106</start><end>3522</end><line>74</line><description>akka.http.scaladsl.server.Directives._enhanceRouteWithConcatenation(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.get).apply(server.this.Directive.addDirectiveApply[(Long,)](akka.http.scaladsl.server.Directives.path[(Long,)](akka.http.scaladsl.server.Directives.LongNumber))(util.this.ApplyConverter.hac1[Long]).apply(((custId: Long) =&gt; {
  val getAccountsMessage: com.accounts.domain.GetAccountDetailsRequest = com.accounts.domain.GetAccountDetailsRequest.apply(custId);
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$1: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$5: com.accounts.domain.GetAccountDetailsRequest = getAccountsMessage;
    &lt;artifact&gt; val x$6: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$7: akka.actor.ActorRef = qual$1.?$default$3(x$5);
    qual$1.?(x$5)(x$6, x$7)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$2: Any) =&gt; x0$2 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$8: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$9: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$10: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$11: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
})))).~(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.post).apply(server.this.Directive.addByNameNullaryApply(akka.http.scaladsl.server.Directives.pathEnd).apply(server.this.Directive.addDirectiveApply[(com.accounts.domain.TransactionRequest,)](akka.http.scaladsl.server.Directives.entity[com.accounts.domain.TransactionRequest](akka.http.scaladsl.server.Directives.as[com.accounts.domain.TransactionRequest](unmarshalling.this.Unmarshaller.messageUnmarshallerFromEntityUnmarshaller[com.accounts.domain.TransactionRequest](com.accounts.marshallers.Json4sMarshaller.unmarshaller[com.accounts.domain.TransactionRequest](scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest]), com.accounts.marshallers.AccountsMarshaller.serialization, com.accounts.marshallers.AccountsMarshaller.formats)))))(util.this.ApplyConverter.hac1[com.accounts.domain.TransactionRequest]).apply(((c: com.accounts.domain.TransactionRequest) =&gt; {
  val genericHttpResponse: scala.concurrent.Future[Any] = {
    &lt;artifact&gt; val qual$2: akka.pattern.AskableActorRef = akka.pattern.`package`.ask(rootActor);
    &lt;artifact&gt; val x$12: com.accounts.domain.TransactionRequest = c;
    &lt;artifact&gt; val x$13: akka.util.Timeout = timeout;
    &lt;artifact&gt; val x$14: akka.actor.ActorRef = qual$2.?$default$3(x$12);
    qual$2.?(x$12)(x$13, x$14)
  };
  server.this.Directive.addDirectiveApply[(Any,)](akka.http.scaladsl.server.Directives.onSuccess(directives.this.OnSuccessMagnet.apply[Any](genericHttpResponse)(util.this.Tupler.forAnyRef[Any])))(util.this.ApplyConverter.hac1[Any]).apply(((x0$3: Any) =&gt; x0$3 match {
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse(akka.http.scaladsl.model.StatusCodes.OK, (t @ (_: com.accounts.common.JsonResponse))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpEntity.Strict](akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson))(marshalling.this.Marshaller.liftMarshaller[akka.http.scaladsl.model.HttpEntity.Strict](marshalling.this.Marshaller.MessageEntityMarshaller)))
    case (statusCode: akka.http.scaladsl.model.StatusCode, response: Any)com.accounts.domain.GenericHttpResponse((x @ (_: akka.http.scaladsl.model.StatusCode)), (msg @ (_: String))) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
      &lt;artifact&gt; val x$15: akka.http.scaladsl.model.StatusCode = x;
      &lt;artifact&gt; val x$16: akka.http.scaladsl.model.HttpEntity.Strict = akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), msg);
      &lt;artifact&gt; val x$17: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
      &lt;artifact&gt; val x$18: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
      akka.http.scaladsl.model.HttpResponse.apply(x$15, x$17, x$16, x$18)
    })(marshalling.this.Marshaller.fromResponse))
    case (p @ _) =&gt; {
      scala.Predef.println(p);
      akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[(akka.http.scaladsl.model.StatusCodes.ServerError, String)](scala.Tuple2.apply[akka.http.scaladsl.model.StatusCodes.ServerError, String](akka.http.scaladsl.model.StatusCodes.InternalServerError, &quot;Unknown error occurred. Please contact administrator.&quot;))(marshalling.this.Marshaller.fromStatusCodeAndValue[akka.http.scaladsl.model.StatusCodes.ServerError, String](scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError], marshalling.this.Marshaller.StringMarshaller)))
    }
  }))
})))))</description><symbolName>akka.http.scaladsl.server.RouteConcatenation.RouteWithConcatenation.~</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getTransactionId</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>269</id><start>406</start><end>422</end><line>18</line><description>new java.util.concurrent.Semaphore(1)</description><symbolName>java.util.concurrent.Semaphore.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>exceptionHandler</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>143</id><start>1001</start><end>1128</end><line>24</line><description>server.this.Directive.addDirectiveApply[(akka.http.scaladsl.model.Uri,)](akka.http.scaladsl.server.Directives.extractUri)(util.this.ApplyConverter.hac1[akka.http.scaladsl.model.Uri]).apply(((uri: akka.http.scaladsl.model.Uri) =&gt; akka.http.scaladsl.server.Directives.complete(marshalling.this.ToResponseMarshallable.apply[akka.http.scaladsl.model.HttpResponse]({
  &lt;artifact&gt; val x$1: akka.http.scaladsl.model.StatusCodes.ServerError = akka.http.scaladsl.model.StatusCodes.InternalServerError;
  &lt;artifact&gt; val x$2: akka.http.scaladsl.model.HttpEntity.Strict = model.this.HttpEntity.apply(&quot;Error &quot;.+(t.getMessage()));
  &lt;artifact&gt; val x$3: scala.collection.immutable.Seq[akka.http.scaladsl.model.HttpHeader] = akka.http.scaladsl.model.HttpResponse.apply$default$2;
  &lt;artifact&gt; val x$4: akka.http.scaladsl.model.HttpProtocol = akka.http.scaladsl.model.HttpResponse.apply$default$4;
  akka.http.scaladsl.model.HttpResponse.apply(x$1, x$3, x$2, x$4)
})(marshalling.this.Marshaller.fromResponse))))</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>170</id><start>2062</start><end>2095</end><line>56</line><description>akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;app&quot;)./[Unit](akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;accounts&quot;))(TupleOps.this.Join.join0P[Unit])./[Unit](akka.http.scaladsl.server.Directives._segmentStringToPathMatcher(&quot;transactions&quot;))(TupleOps.this.Join.join0P[Unit])</description><symbolName>akka.http.scaladsl.server.PathMatcher./</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>215</id><start>2869</start><end>2869</end><line>77</line><description>scala.reflect.ManifestFactory.classType[com.accounts.domain.TransactionRequest](classOf[com.accounts.domain.TransactionRequest])</description><symbolName>scala.reflect.ManifestFactory.classType</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>287</id><start>1347</start><end>1357</end><line>45</line><description>tx.balance</description><symbolName>com.accounts.domain.TransactionDetails.balance</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsRoutes</class><classType>Class</classType><fullClassName>com.accounts.routes.AccountsRoutes</fullClassName><method>toLogEntry</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>161</id><start>1641</start><end>1655</end><line>44</line><description>akka.http.scaladsl.server.Directives.extractRequest</description><symbolName>akka.http.scaladsl.server.directives.BasicDirectives.extractRequest</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>242</id><start>3227</start><end>3227</end><line>82</line><description>akka.http.scaladsl.model.HttpResponse.apply$default$4</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply$default$4</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>251</id><start>3382</start><end>3382</end><line>85</line><description>scala.Predef.$conforms[akka.http.scaladsl.model.StatusCodes.ServerError]</description><symbolName>scala.Predef.$conforms</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>224</id><start>2946</start><end>2946</end><line>78</line><description>qual$2.?$default$3(x$12)</description><symbolName>akka.pattern.AskableActorRef.?$default$3</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>197</id><start>2544</start><end>2614</end><line>66</line><description>akka.http.scaladsl.model.HttpResponse.apply(x$8, x$10, x$9, x$11)</description><symbolName>akka.http.scaladsl.model.HttpResponse.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>296</id><start>1682</start><end>1696</end><line>52</line><description>acct.accountId</description><symbolName>com.accounts.domain.AccountDetailsWithTransactions.accountId</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>233</id><start>3101</start><end>3141</end><line>81</line><description>akka.http.scaladsl.model.HttpEntity.apply(model.this.ContentType.apply(akka.http.scaladsl.model.MediaTypes.application/json), t.toJson)</description><symbolName>akka.http.scaladsl.model.HttpEntity.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</source><package>com.accounts.routes</package><class>AccountsOperationRoute</class><classType>Object</classType><fullClassName>com.accounts.routes.AccountsOperationRoute</fullClassName><method>route</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\routes\AccountsRoutes.scala</path><id>206</id><start>2690</start><end>2690</end><line>69</line><description>marshalling.this.Marshaller.StringMarshaller</description><symbolName>akka.http.scaladsl.marshalling.PredefinedToEntityMarshallers.StringMarshaller</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>createTransaction</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>305</id><start>1983</start><end>2032</end><line>61</line><description>balance.&lt;(transactionRequest.value).||(balance.==(0)).unary_!</description><symbolName>scala.Boolean.unary_!</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</source><package>com.accounts.storage</package><class>TransactionInfoDatabase</class><classType>Class</classType><fullClassName>com.accounts.storage.TransactionInfoDatabase</fullClassName><method>getBalance</method><path>D:\NOTBACKEDUP\exp\bank\Transactions\src\main\scala\com\accounts\storage\TransactionInfoDatabase.scala</path><id>278</id><start>929</start><end>959</end><line>35</line><description>TransactionInfoDatabase.this.transactionInfo.get(accountNo)</description><symbolName>scala.collection.MapLike.get</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
</statements>